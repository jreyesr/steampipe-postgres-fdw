name: ">>>> Docker testing"
on: push

jobs:
  build-linux-arm:
    name: Build for Linux ARM64
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Do stuff
      uses: uraimo/run-on-arch-action@v2
      with:
        arch: aarch64
        distro: ubuntu_latest
        run: |
          uname -m

          apt-get update -y
          apt-get -y install sudo git curl tar gzip file postgresql-server-dev-14 build-essential make

          echo "install go"
          curl -LO https://go.dev/dl/go1.18beta1.linux-arm64.tar.gz
          tar -C /usr/local -xzf go1.18beta1.linux-arm64.tar.gz
          export GOROOT=/usr/local/go
          export GOPATH=$HOME/go
          export PATH=$GOPATH/bin:$GOROOT/bin:$PATH
          go version
          
          echo "find stuff"
          which pg_config
          pg_config --version

          export PATH=$(pg_config --bindir):$PATH
          export PGXS=$(pg_config --pgxs)

          export SERVER_LIB=$(pg_config --includedir)/14/server
          export INTERNAL_LIB=$(pg_config --includedir)/internal

          echo "clone repo"
          git clone https://github.com/turbot/steampipe-postgres-fdw.git
          cd steampipe-postgres-fdw/fdw
          pwd

          echo "make clean"
          go version
          
          which pg_config
          pg_config --version
          
          export PATH=$(pg_config --bindir):$PATH
          export PGXS=$(pg_config --pgxs)
      
          export SERVER_LIB=$(pg_config --includedir)/server
          export INTERNAL_LIB=$(pg_config --includedir)/internal

          export CFLAGS="$(pg_config --cflags) -I${SERVER_LIB} -I${INTERNAL_LIB} -g"
          export PG_CFLAGS="$(pg_config --cflags) -I${SERVER_LIB} -I${INTERNAL_LIB} -g"
      
          export LDFLAGS=$(pg_config --ldflags)
          export PG_LDFLAGS=$(pg_config --ldflags)
        
          make clean

          echo "make go"
          go version
          
          which pg_config
          pg_config --version
          
          export PATH=$(pg_config --bindir):$PATH
          export PGXS=$(pg_config --pgxs)
      
          export SERVER_LIB=$(pg_config --includedir)/postgresql/server
          export INTERNAL_LIB=$(pg_config --includedir)/postgresql/internal

          export CFLAGS="$(pg_config --cflags) -I${SERVER_LIB} -I${INTERNAL_LIB} -g"
          export PG_CFLAGS="$(pg_config --cflags) -I${SERVER_LIB} -I${INTERNAL_LIB} -g"

          export CPPFLAGS="$(pg_config --cppflags) -I${SERVER_LIB} -I${INTERNAL_LIB} -g"
          export PG_CPPFLAGS="$(pg_config --cppflags) -I${SERVER_LIB} -I${INTERNAL_LIB} -g"
      
          export LDFLAGS=$(pg_config --ldflags)
          export PG_LDFLAGS=$(pg_config --ldflags)
        
          make go

          echo "make"
          go version
          
          which pg_config
          pg_config --version
          
          export PATH=$(pg_config --bindir):$PATH
          export PGXS=$(pg_config --pgxs)
      
          export SERVER_LIB=$(pg_config --includedir)/server
          export INTERNAL_LIB=$(pg_config --includedir)/internal

          export CFLAGS="$(pg_config --cflags) -I${SERVER_LIB} -I${INTERNAL_LIB} -g"
          export PG_CFLAGS="$(pg_config --cflags) -I${SERVER_LIB} -I${INTERNAL_LIB} -g"
      
          export LDFLAGS=$(pg_config --ldflags)
          export PG_LDFLAGS=$(pg_config --ldflags)
          
          make

          echo "check binary"
          ls
          gzip steampipe_postgres_fdw.so
          file steampipe_postgres_fdw.so
          mv steampipe_postgres_fdw.so.gz steampipe_postgres_fdw.so.linux_arm64.gz

    - name: gzip the steampipe_postgres_fdw.so
      run: |-
        docker ps
        gzip steampipe_postgres_fdw.so
        mv steampipe_postgres_fdw.so.gz steampipe_postgres_fdw.so.linux_arm64.gz
      working-directory: ./fdw

    - name: Save Linux Build Artifact - ARM64
      uses: actions/upload-artifact@v3
      with:
        name: steampipe_postgres_fdw.so.linux_amd64
        path: ./fdw/steampipe_postgres_fdw.so.linux_arm64.gz
        if-no-files-found: error
